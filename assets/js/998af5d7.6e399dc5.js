"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9049],{64777:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var t=n(85893),a=n(11151);const s={sidebar_label:"graph_query_engine",title:"agentchat.contrib.graph_rag.graph_query_engine"},i=void 0,c={id:"reference/agentchat/contrib/graph_rag/graph_query_engine",title:"agentchat.contrib.graph_rag.graph_query_engine",description:"GraphStoreQueryResult",source:"@site/docs/reference/agentchat/contrib/graph_rag/graph_query_engine.md",sourceDirName:"reference/agentchat/contrib/graph_rag",slug:"/reference/agentchat/contrib/graph_rag/graph_query_engine",permalink:"/autogen/docs/reference/agentchat/contrib/graph_rag/graph_query_engine",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/graph_rag/graph_query_engine.md",tags:[],version:"current",frontMatter:{sidebar_label:"graph_query_engine",title:"agentchat.contrib.graph_rag.graph_query_engine"},sidebar:"referenceSideBar",previous:{title:"document",permalink:"/autogen/docs/reference/agentchat/contrib/graph_rag/document"},next:{title:"graph_rag_capability",permalink:"/autogen/docs/reference/agentchat/contrib/graph_rag/graph_rag_capability"}},d={},o=[{value:"GraphStoreQueryResult",id:"graphstorequeryresult",level:2},{value:"GraphQueryEngine",id:"graphqueryengine",level:2},{value:"init_db",id:"init_db",level:3},{value:"add_records",id:"add_records",level:3},{value:"query",id:"query",level:3}];function h(e){const r={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"graphstorequeryresult",children:"GraphStoreQueryResult"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"@dataclass\nclass GraphStoreQueryResult()\n"})}),"\n",(0,t.jsx)(r.p,{children:"A wrapper of graph store query results."}),"\n",(0,t.jsx)(r.p,{children:"answer: human readable answer to question/query.\nresults: intermediate results to question/query, e.g. node entities."}),"\n",(0,t.jsx)(r.h2,{id:"graphqueryengine",children:"GraphQueryEngine"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"class GraphQueryEngine(Protocol)\n"})}),"\n",(0,t.jsx)(r.p,{children:"An abstract base class that represents a graph query engine on top of a underlying graph database."}),"\n",(0,t.jsx)(r.p,{children:"This interface defines the basic methods for graph rag."}),"\n",(0,t.jsx)(r.h3,{id:"init_db",children:"init_db"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def init_db(input_doc: List[Document] | None = None)\n"})}),"\n",(0,t.jsx)(r.p,{children:"This method initializes graph database with the input documents or records.\nUsually, it takes the following steps,"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"connecting to a graph database."}),"\n",(0,t.jsx)(r.li,{children:"extract graph nodes, edges based on input data, graph schema and etc."}),"\n",(0,t.jsx)(r.li,{children:"build indexes etc."}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"input_doc"})," - a list of input documents that are used to build the graph in database."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Returns"})," - GraphStore"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"add_records",children:"add_records"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def add_records(new_records: List) -> bool\n"})}),"\n",(0,t.jsx)(r.p,{children:"Add new records to the underlying database and add to the graph if required."}),"\n",(0,t.jsx)(r.h3,{id:"query",children:"query"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def query(question: str,\n          n_results: int = 1,\n          **kwargs) -> GraphStoreQueryResult\n"})}),"\n",(0,t.jsx)(r.p,{children:"This method transform a string format question into database query and return the result."})]})}function l(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>c,a:()=>i});var t=n(67294);const a={},s=t.createContext(a);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);