"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2722],{42284:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=s(85893),r=s(11151);const o={},i="Mem0: Long-Term Memory and Personalization for Agents",a={id:"ecosystem/mem0",title:"Mem0: Long-Term Memory and Personalization for Agents",description:"Mem0 Platform provides a smart, self-improving memory layer for Large Language Models (LLMs), enabling developers to create personalized AI experiences that evolve with each user interaction.",source:"@site/docs/ecosystem/mem0.md",sourceDirName:"ecosystem",slug:"/ecosystem/mem0",permalink:"/autogen/docs/ecosystem/mem0",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/ecosystem/mem0.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Llamaindex",permalink:"/autogen/docs/ecosystem/llamaindex"},next:{title:"MemGPT",permalink:"/autogen/docs/ecosystem/memgpt"}},m={},l=[{value:"Installation",id:"installation",level:2},{value:"Features",id:"features",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Mem0 Platform Examples",id:"mem0-platform-examples",level:2},{value:"AutoGen with Mem0 Example",id:"autogen-with-mem0-example",level:3}];function c(e){const n={a:"a",b:"b",code:"code",details:"details",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",summary:"summary",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",u:"u",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mem0-long-term-memory-and-personalization-for-agents",children:"Mem0: Long-Term Memory and Personalization for Agents"}),"\n",(0,t.jsx)(n.img,{src:"https://github.com/mem0ai/mem0/blob/main/docs/images/mem0-bg.png?raw=true",alt:"Mem0 logo",style:{width:"40%"}}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.mem0.ai/",children:"Mem0 Platform"})," provides a smart, self-improving memory layer for Large Language Models (LLMs), enabling developers to create personalized AI experiences that evolve with each user interaction."]}),"\n",(0,t.jsxs)(n.p,{children:["At a high level, Mem0 Platform offers comprehensive memory management, self-improving memory capabilities, cross-platform consistency, and centralized memory control for AI applications. For more info, check out the ",(0,t.jsx)(n.a,{href:"https://docs.mem0.ai",children:"Mem0 Platform Documentation"}),"."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["\ud83e\udde0 ",(0,t.jsx)(n.strong,{children:"Comprehensive Memory Management"})]}),(0,t.jsx)(n.td,{children:"Manage long-term, short-term, semantic, and episodic memories"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["\ud83d\udd04 ",(0,t.jsx)(n.strong,{children:"Self-Improving Memory"})]}),(0,t.jsx)(n.td,{children:"Adaptive system that learns from user interactions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["\ud83c\udf10 ",(0,t.jsx)(n.strong,{children:"Cross-Platform Consistency"})]}),(0,t.jsx)(n.td,{children:"Unified user experience across various AI platforms"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["\ud83c\udf9b\ufe0f ",(0,t.jsx)(n.strong,{children:"Centralized Memory Control"})]}),(0,t.jsx)(n.td,{children:"Effortless storage, updating, and deletion of memories"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"Simplified Development"})]}),(0,t.jsx)(n.td,{children:"API-first approach for streamlined integration"})]})]})]}),"\n",(0,t.jsxs)(n.details,{open:!0,children:["\n  ",(0,t.jsx)(n.summary,{children:(0,t.jsx)(n.b,{children:(0,t.jsx)(n.u,{children:"Activity Dashboard"})})}),"\n  ",(0,t.jsxs)(n.a,{href:"https://app.mem0.ai/",children:["\n   ",(0,t.jsx)(n.img,{src:"https://github.com/mem0ai/mem0/blob/main/docs/images/platform/activity.png?raw=true",style:{width:"70%"},alt:"Activity Dashboard"}),"\n  "]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Mem0 Platform works seamlessly with various AI applications."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Sign Up:"}),"\nCreate an account at ",(0,t.jsx)(n.a,{href:"https://app.mem0.ai/",children:"Mem0 Platform"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Generate API Key:"}),"\nCreate an API key in your Mem0 dashboard"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Install Mem0 SDK:"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install mem0ai\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configure Your Environment:"}),"\nAdd your API key to your environment variables"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MEM0_API_KEY=<YOUR_MEM0_API_KEY>\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Initialize Mem0:"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from mem0ai import MemoryClient\nmemory = MemoryClient(api_key=os.getenv("MEM0_API_KEY"))\n'})}),"\n",(0,t.jsx)(n.p,{children:"After initializing Mem0, you can start using its memory management features in your AI application."}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Long-term Memory"}),": Store and retrieve information persistently across sessions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Short-term Memory"}),": Manage temporary information within a single interaction"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Semantic Memory"}),": Organize and retrieve conceptual knowledge"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Episodic Memory"}),": Store and recall specific events or experiences"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-Improving System"}),": Continuously refine understanding based on user interactions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Personalized Learning Assistants"}),"\n",(0,t.jsx)(n.li,{children:"Customer Support AI Agents"}),"\n",(0,t.jsx)(n.li,{children:"Healthcare Assistants"}),"\n",(0,t.jsx)(n.li,{children:"Virtual Companions"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"mem0-platform-examples",children:"Mem0 Platform Examples"}),"\n",(0,t.jsx)(n.h3,{id:"autogen-with-mem0-example",children:"AutoGen with Mem0 Example"}),"\n",(0,t.jsx)(n.p,{children:"This example demonstrates how to use Mem0 with AutoGen to create a conversational AI system with memory capabilities."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import os\nfrom autogen import ConversableAgent\nfrom mem0 import MemoryClient\n\n# Set up environment variables\nos.environ["OPENAI_API_KEY"] = "your_openai_api_key"\nos.environ["MEM0_API_KEY"] = "your_mem0_api_key"\n\n# Initialize Agent and Memory\nagent = ConversableAgent(\n    "chatbot",\n    llm_config={"config_list": [{"model": "gpt-4", "api_key": os.environ.get("OPENAI_API_KEY")}]},\n    code_execution_config=False,\n    function_map=None,\n    human_input_mode="NEVER",\n)\n\nmemory = MemoryClient(api_key=os.environ.get("MEM0_API_KEY"))\n\n# Insert a conversation into memory\nconversation = [\n   {\n        "role": "assistant",\n        "content": "Hi, I\'m Best Buy\'s chatbot!\\n\\nThanks for being a My Best Buy TotalTM member.\\n\\nWhat can I help you with?"\n    },\n    {\n        "role": "user",\n        "content": "Seeing horizontal lines on our tv. TV model: Sony - 77\\" Class BRAVIA XR A80K OLED 4K UHD Smart Google TV"\n    },\n]\n\nmemory.add(messages=conversation, user_id="customer_service_bot")\n\n# Agent Inference\ndata = "Which TV am I using?"\n\nrelevant_memories = memory.search(data, user_id="customer_service_bot")\nflatten_relevant_memories = "\\n".join([m["memory"] for m in relevant_memories])\n\nprompt = f"""Answer the user question considering the memories.\nMemories:\n{flatten_relevant_memories}\n\\n\\n\nQuestion: {data}\n"""\n\nreply = agent.generate_reply(messages=[{"content": prompt, "role": "user"}])\nprint("Reply :", reply)\n\n# Multi Agent Conversation\nmanager = ConversableAgent(\n    "manager",\n    system_message="You are a manager who helps in resolving customer issues.",\n    llm_config={"config_list": [{"model": "gpt-4", "temperature": 0, "api_key": os.environ.get("OPENAI_API_KEY")}]},\n    human_input_mode="NEVER"\n)\n\ncustomer_bot = ConversableAgent(\n    "customer_bot",\n    system_message="You are a customer service bot who gathers information on issues customers are facing.",\n    llm_config={"config_list": [{"model": "gpt-4", "temperature": 0, "api_key": os.environ.get("OPENAI_API_KEY")}]},\n    human_input_mode="NEVER"\n)\n\ndata = "What appointment is booked?"\n\nrelevant_memories = memory.search(data, user_id="customer_service_bot")\nflatten_relevant_memories = "\\n".join([m["memory"] for m in relevant_memories])\n\nprompt = f"""\nContext:\n{flatten_relevant_memories}\n\\n\\n\nQuestion: {data}\n"""\n\nresult = manager.send(prompt, customer_bot, request_reply=True)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Access the complete code from this notebook: ",(0,t.jsx)(n.a,{href:"https://colab.research.google.com/drive/1NZEwC9w6V2S6hYmK7l2SQ9jhQrG1uKk8?usp=sharing",children:"Mem0 with AutoGen"})]}),"\n",(0,t.jsx)(n.p,{children:"This example showcases:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Setting up AutoGen agents and Mem0 memory"}),"\n",(0,t.jsx)(n.li,{children:"Adding a conversation to Mem0 memory"}),"\n",(0,t.jsx)(n.li,{children:"Using Mem0 to retrieve relevant memories for agent inference"}),"\n",(0,t.jsx)(n.li,{children:"Implementing a multi-agent conversation with memory-augmented context"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more Mem0 examples, visit our ",(0,t.jsx)(n.a,{href:"https://docs.mem0.ai/examples",children:"documentation"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>i});var t=s(67294);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);